## 1 Creating Managing Slice

- npm i @reduxjs/toolkit
- npm i react-redux

- Created
  => "store"
  => "cart-slice.js"
  => "ui-slice.js"

  => Added/Implemented Redux to the Project

* import { createSlice } from '@reduxjs/toolkit'
  => To create "slice"

* import { configureStore } from "@reduxjs/toolkit";
  => To create "store" in the main component

* import { Provider } from "react-redux";
  => To provide "store" to our application
  => Added to the highest level component => "index.js"
  => <Provider store={store}>

* import { useDispatch } from "react-redux";
  => To dispatch/call reducer functions
  => "CartButton.js"

* import { useSelector } from "react-redux";
  => To get/extract Data from store/slice
  => "App.js"

//////////////////////////////////////////////////////////////////////////////////////////////////

## 2 Redux & Async code

- "App.js"
  => useSelector() to get DATA
  => useEffect() to fetch { method: "PUT"} DATA to the backend

--------------------------------------------------------- { method: 'PUT' }
fetch method => to post data, or override if exist

**\*** ERROR **\***
When loading app for the first time is causing useEffent() to run with a empthy "cart"

//////////////////////////////////////////////////////////////////////////////////////////////////

## 3 Handling Errors

- "Notification.js"
  => Component for notification message window

- "ui-slice.js"
  => added reducer for "showNotification()" for "App.js" to use

- "App.js"
  => added Async/Await to useEffect() & handling err
  => useDispatch() to use "showNotification()" => to show different notification states based on error

**\*** FIX **\***
Preventing useEffect() to run for the first time

//////////////////////////////////////////////////////////////////////////////////////////////////

## 4 Using an Action Creator Thunk

Reason to use (to keep component clean)

---------------------------------------------- Thunk function
A function that delays an action until later
Implemented => "cart-slice.js"
=> Takes (data)
=> returns a function that takes (dispatch) as argument then { what to do }

- "App.js"
  => Replaced useEffect() into "Thunk" Function

- "cart-slice.js"
  => Created "Thunk" function "sendCardData()"
  => Moved to "cart-actions.js" later on

//////////////////////////////////////////////////////////////////////////////////////////////////

## 5 Fetching Data with Thunk Function

- "cart-actions.js"
  => Moved Thunk Function from "cart-slice.js"
  => Created Thunk Function for fetching "get" data and display it

  - Thunk Function are use in "App.js"

//////////////////////////////////////////////////////////////////////////////////////////////////

## 6 Fixing the fetching logic & bugs

Cart data is seding automatically when loading for the first time

- "cart-slice.js"
  => Added to the "initialState" new property (true/false) to prevent Cart data to be sent on first page load

- 'cart-actions.js"
  => Fixed bug of Item undefined when cart is empthy when page loads
  => manually setting values to "initialCartState", to avoid "Item undefined" if (!cartData)
